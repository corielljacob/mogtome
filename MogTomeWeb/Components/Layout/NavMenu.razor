@using Blazored.LocalStorage
@using MogTomeWeb.Components.Shared
@using MogTomeWeb.Services
@inject IJSRuntime JS
@inject IAdminSessionService AdminSession

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">@GetBannerName()</a>
        <button @onclick="ToggleDarkMode" class="dark-mode-toggle" >
            <img src="white_moon.svg" alt="Toggle dark mode" />
        </button>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3" @ref="HoldBtn">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="members">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Members
            </NavLink>
        </div>
    </nav>
</div>

<script>
    function enableDarkMode() {
    document.body.classList.add('dark-mode');
    }

    function disableDarkMode() {
    document.body.classList.remove('dark-mode');
    }
</script>

<script>
    window.registerHoldHandler = function (element, dotNetHelper, holdDuration) {
    let timer = null;

    element.addEventListener('mousedown', () => {
    timer = setTimeout(() => {
    dotNetHelper.invokeMethodAsync('TriggerHold');
    }, holdDuration);
    });

    element.addEventListener('mouseup', () => clearTimeout(timer));
    element.addEventListener('mouseleave', () => clearTimeout(timer));
    element.addEventListener('touchend', () => clearTimeout(timer));
    };
</script>



@code {
    [Inject]
    private ILocalStorageService localStorage { get; set; }
    private bool DarkModeEnabled = false;
    private ElementReference HoldBtn;
    private bool ShowPasscodeModal = false;
    [Parameter] public EventCallback OnRequestAdmin { get; set; }

    protected override void OnInitialized()
    {
        AdminSession.OnAdminStateChanged += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerHoldHandler", HoldBtn, dotNetRef, 3000);
        }
    }

    [JSInvokable]
    public async Task TriggerHold()
    {
        await OnRequestAdmin.InvokeAsync();
    }

    private async Task ToggleDarkMode()
    {
        var darkModeEnabled = await localStorage.GetItemAsync<string>("darkModeEnabled");

        if(string.IsNullOrEmpty(darkModeEnabled))
        {
            await localStorage.SetItemAsync<string>("darkModeEnabled", "true");
            await JS.InvokeVoidAsync("enableDarkMode");
        }
        else
        {
            if(bool.Parse(darkModeEnabled))
            {
                await localStorage.SetItemAsync<string>("darkModeEnabled", "false");
                await JS.InvokeVoidAsync("disableDarkMode");
            }
            else
            {
                await localStorage.SetItemAsync<string>("darkModeEnabled", "true");
                await JS.InvokeVoidAsync("enableDarkMode");
            }
        }
    }

    private string GetBannerName()
    {
        if (AdminSession.IsAdmin)
            return "MogTome Admin";
        else
            return "MogTome";
    }
}
