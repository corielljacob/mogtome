@page "/members"
@using MogTome.Data
@using MogTome.Services
@using MongoDB.Driver
@attribute [StreamRendering]

<PageTitle>Members</PageTitle>

@code {
    [Inject]
    private MongoService _mongoService { get; set; }
    private List<FreeCompanyMember> totalMemberList { get; set; }
    private List<FreeCompanyMember> displayedMembers { get; set; } = new List<FreeCompanyMember>();
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        totalMemberList = await _mongoService.GetFreeCompanyMembers();
        totalPages = (int)Math.Ceiling(totalMemberList.Count / (double)pageSize);
        UpdateDisplayedCards();
    }

    private void UpdateDisplayedCards()
    {
        var filteredList = totalMemberList
            .Where(card => card.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           card.FreeCompanyRank.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        totalPages = (int)Math.Ceiling(filteredList.Count / (double)pageSize);
        displayedMembers = filteredList.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdateDisplayedCards();
        }
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdateDisplayedCards();
        }
    }

    private void GoToPage()
    {
        if (currentPage < 1)
        {
            currentPage = 1;
        }
        else if (currentPage > totalPages)
        {
            currentPage = totalPages;
        }
        UpdateDisplayedCards();
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        currentPage = 1;  // Reset to the first page when the search query changes
        UpdateDisplayedCards();
    }
}

<div class="header-container">
    <div class="search-container">
        <label style="font-size:15px" for="search"><b>Search by Name/Rank</b></label>
        <TextInput Value="@searchQuery" ValueExpression="() => searchQuery" @oninput="OnSearchQueryChanged" Placeholder="Enter name or rank..." />
    </div>

    <div class="pagination">
        <Button Color="ButtonColor.Primary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</Button>
        <span>Page <input type="text" @bind="currentPage" @bind:event="oninput" @onblur="GoToPage" @onchange="GoToPage" style="width: 40px; text-align: center;" /> of @totalPages</span>
        <Button Color="ButtonColor.Primary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</Button>
    </div>

</div>
<div class="item-count">
    <p>Displaying @displayedMembers.Count items</p>
</div>

<hr>

<div class="card-container">
    @if (displayedMembers == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (FreeCompanyMember member in displayedMembers)
        {
            <Card Style="width:18rem;">
                <img class="rounded-top" src="@member.AvatarLink" alt="placeholder" />
                <CardBody>
                    <CardTitle>@member.Name</CardTitle>
                    <CardText>@member.FreeCompanyRank</CardText>
                    <Button Color="ButtonColor.Primary" To="#" Type="ButtonType.Link">Lodestone</Button>
                </CardBody>
            </Card>
        }
    }
</div>

@code {
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;
}
