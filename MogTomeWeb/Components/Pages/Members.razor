@page "/members"
@using MogTome.Data
@using MogTome.Services
@using MongoDB.Driver
@attribute [StreamRendering]

<PageTitle>Members</PageTitle>

@code {
    [Inject]
    private MongoService _mongoService { get; set; }
    private List<FreeCompanyMember> totalMemberList { get; set; }
    private List<FreeCompanyMember> displayedMembers { get; set; } = new List<FreeCompanyMember>();
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages;
    private int currentSearchCount;
    private string searchQuery = string.Empty;
    private List<string> _rankFilterSelections = new();

    protected override async Task OnInitializedAsync()
    {
        totalMemberList = await _mongoService.GetFreeCompanyMembers();
        totalPages = (int)Math.Ceiling(totalMemberList.Count / (double)pageSize);
        UpdateDisplayedCards();
    }

    private void UpdateDisplayedCards()
    {
        var filteredList = totalMemberList
            .Where(card => card.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           card.FreeCompanyRank.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .Where(card => _rankFilterSelections.Count == 0 || _rankFilterSelections.Contains(card.FreeCompanyRank))
            .ToList();

        totalPages = (int)Math.Ceiling(filteredList.Count / (double)pageSize);
        currentSearchCount = filteredList.Count;
        displayedMembers = filteredList.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdateDisplayedCards();
        }
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdateDisplayedCards();
        }
    }

    private void GoToPage()
    {
        if (currentPage < 1)
        {
            currentPage = 1;
        }
        else if (currentPage > totalPages)
        {
            currentPage = totalPages;
        }
        UpdateDisplayedCards();
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
            searchQuery = e.Value.ToString() ?? "";

        currentPage = 1;
        UpdateDisplayedCards();
    }
}


<div class="header-container">
    <div class="search-and-filter-container">
        <div class="search-container">
            <label style="font-size:15px" for="search"><b>Search by Name or Rank</b></label>
            <TextInput Value="@searchQuery" ValueExpression="() => searchQuery" @oninput="OnSearchQueryChanged" Placeholder="Enter name or rank..." />
        </div>


        <div class="filter-container">
            <label style="font-size:15px" for="filter"><b>Filter by Rank</b></label>
            <SimpleMultiselect class="custom-multiselect" Options="GetRanks()"
                               @bind-SelectedOptions="_rankFilterSelections"
                               @bind-SelectedOptions:after="UpdateDisplayedCards">
            </SimpleMultiselect>
        </div>
    </div>
    

    <div class="pagination-container">
        <div class="pagination">
            <Button Color="ButtonColor.Primary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</Button>
            <span>Page <input type="text" @bind="currentPage" @bind:event="oninput" @onblur="GoToPage" @onchange="GoToPage" style="width: 40px; text-align: center;" /> of @totalPages</span>
            <Button Color="ButtonColor.Primary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</Button>
        </div>
        <div class="item-count">
            <p class="item-count-text">Displaying @displayedMembers.Count members<br />@currentSearchCount total members</p>
        </div>
    </div>
</div>
<hr>
<div class="card-container">
    @if (displayedMembers == null || displayedMembers.Count  == 0)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (FreeCompanyMember member in displayedMembers)
        {
            <Card class=@GetClass(member.FreeCompanyRank) Style="width:14rem;">
                <img class="rounded-top card-img-top" src="@member.AvatarLink" alt="placeholder" />
                <CardBody >
                    <CardTitle class="title">@member.Name</CardTitle>
                    <CardText>@member.FreeCompanyRank <img class="rounded-top" src="@member.FreeCompanyRankIcon" alt="placeholder" /></CardText>
                    <a href="@($"https://na.finalfantasyxiv.com/lodestone/character/{member.CharacterId}")" target="_blank" class="btn btn-primary">Lodestone</a>
                </CardBody>
            </Card>
        }
    }
</div>

@code {
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private string GetClass(string rank) {
        if (rank == "Moogle Guardian")
            return "guardian";
        else if (rank == "Moogle Knight")
            return "knight";
        else if (rank == "Paissa Trainer")
            return "paissa";
        else
            return "general-member";
    }

    private List<string> GetRanks()
    {
        return new List<string> { 
            "Moogle Guardian", 
            "Moogle Knight", 
            "Paissa Trainer",
            "Coeurl Hunter",
            "Mandragora",
            "Apkallu Seeker",
            "Kupo Shelf",
            "Bom Boko"
        };
    }

    
}